import { Ruleset } from "../rulesets/ruleset";
import { RuleLink } from "../rulesets/rule-link";
import { IValidationGroup } from "./ivalidation-group";
import { IFieldErrorProcessor } from "../processors/ifield-error-processor";
import { IRuleResolver } from "../rulesets/irule-resolver";
import { IModelResolver } from "../resolvers/imodel-resolver";
import { PromiseCounter } from "../promises/promise-counter";
import { IModelResolverFactory } from "../factories/imodel-resolver-factory";
import { EventHandler } from "event-js";
import { ICompositeValidationRule } from "../rules/composite/icomposite-validation-rule";
export declare class ValidationGroup implements IValidationGroup {
    protected fieldErrorProcessor: IFieldErrorProcessor;
    protected ruleResolver: IRuleResolver;
    protected modelResolverFactory: IModelResolverFactory;
    protected ruleset: Ruleset;
    propertyStateChangedEvent: EventHandler;
    modelStateChangedEvent: EventHandler;
    protected propertyErrors: any;
    protected promiseCounter: PromiseCounter;
    protected modelResolver: IModelResolver;
    constructor(fieldErrorProcessor: IFieldErrorProcessor, ruleResolver: IRuleResolver, modelResolverFactory: IModelResolverFactory, model: any, ruleset: Ruleset);
    protected static isRuleset(possibleRuleset: any): boolean;
    protected static isForEach(possibleForEach: any): boolean;
    protected validatePropertyWithRuleLinks: (propertyName: string, propertyRules: RuleLink[]) => Promise<any>;
    protected validatePropertyWithRuleSet: (propertyRoute: string, ruleset: Ruleset) => void;
    protected validatePropertyWithRules: (propertyRoute: string, rules: any) => void;
    protected startValidateProperty: (propertyRoute: string) => Promise<void>;
    protected validateCompositeRule: (compositeRule: ICompositeValidationRule) => Promise<any>;
    protected validateCompositeRules: () => Promise<void>;
    protected startValidateModel: () => void;
    protected hasErrors(): boolean;
    changeValidationTarget: (model: any) => void;
    validateProperty: (propertyRoute: string) => Promise<boolean>;
    validate: () => Promise<boolean>;
    getModelErrors: (revalidate?: boolean) => Promise<any>;
    getPropertyError: (propertyRoute: string, revalidate?: boolean) => Promise<any>;
    getPropertyDisplayName: (propertyRoute: string) => string;
    isPropertyInGroup: (propertyRoute: string) => boolean;
    release: () => void;
}
