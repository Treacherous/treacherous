import { Ruleset } from "../rulesets/ruleset";
import { RuleLink } from "../rulesets/rule-link";
import { IValidationGroup } from "./ivalidation-group";
import { IFieldErrorProcessor } from "../processors/ifield-error-processor";
import { IRuleResolver } from "../rulesets/irule-resolver";
import { IValidationSettings } from "../settings/ivalidation-settings";
import { IModelResolver } from "../resolvers/imodel-resolver";
import { PromiseCounter } from "../promises/promise-counter";
export declare class ValidationGroup implements IValidationGroup {
    protected fieldErrorProcessor: IFieldErrorProcessor;
    protected ruleResolver: IRuleResolver;
    protected settings: IValidationSettings;
    protected ruleset: Ruleset;
    protected propertyErrors: {};
    protected promiseCounter: PromiseCounter;
    protected modelResolver: IModelResolver;
    constructor(fieldErrorProcessor: IFieldErrorProcessor, ruleResolver: IRuleResolver, settings: IValidationSettings, model: any, ruleset: Ruleset);
    protected isRuleset(possibleRuleset: any): boolean;
    protected isForEach(possibleForEach: any): boolean;
    protected validatePropertyWithRuleLinks: (propertyName: string, propertyRules: RuleLink[]) => any;
    protected validatePropertyWithRuleSet: (propertyName: string, ruleset: Ruleset) => void;
    protected validatePropertyWithRules: (propertyName: string, rules: any) => ValidationGroup;
    protected startValidateProperty: (propertyName: string) => ValidationGroup;
    protected startValidateModel: () => this;
    protected hasErrors(): boolean;
    changeValidationTarget: (model: any) => void;
    validateProperty: (propertyname: any) => Promise<boolean>;
    validate: () => Promise<boolean>;
    getModelErrors: () => Promise<any>;
    getPropertyError: (propertyRoute: string) => Promise<any>;
    release: () => void;
}
